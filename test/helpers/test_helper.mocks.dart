// Mocks generated by Mockito 5.3.2 from annotations
// in kumparan_clone/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i21;
import 'dart:io' as _i10;
import 'dart:typed_data' as _i22;

import 'package:dartz/dartz.dart' as _i4;
import 'package:http/http.dart' as _i5;
import 'package:kumparan_clone/src/common/failure.dart' as _i14;
import 'package:kumparan_clone/src/data/datasources/article_data_source.dart'
    as _i6;
import 'package:kumparan_clone/src/data/datasources/auth_data_source.dart'
    as _i11;
import 'package:kumparan_clone/src/data/datasources/profile_data_source.dart'
    as _i12;
import 'package:kumparan_clone/src/data/models/article_detail_model.dart'
    as _i2;
import 'package:kumparan_clone/src/data/models/article_model.dart' as _i8;
import 'package:kumparan_clone/src/data/models/comment_model.dart' as _i9;
import 'package:kumparan_clone/src/data/models/user_model.dart' as _i3;
import 'package:kumparan_clone/src/domain/entities/article.dart' as _i15;
import 'package:kumparan_clone/src/domain/entities/article_detail.dart' as _i16;
import 'package:kumparan_clone/src/domain/entities/comment.dart' as _i17;
import 'package:kumparan_clone/src/domain/entities/user.dart' as _i20;
import 'package:kumparan_clone/src/domain/repositories/article_repository.dart'
    as _i13;
import 'package:kumparan_clone/src/domain/repositories/auth_repository.dart'
    as _i18;
import 'package:kumparan_clone/src/domain/repositories/profile_repository.dart'
    as _i19;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeArticleDetailModel_0 extends _i1.SmartFake
    implements _i2.ArticleDetailModel {
  _FakeArticleDetailModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserModel_1 extends _i1.SmartFake implements _i3.UserModel {
  _FakeUserModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_3 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_4 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ArticleDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticleDataSource extends _i1.Mock implements _i6.ArticleDataSource {
  MockArticleDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i8.ArticleModel>> getArticleList() => (super.noSuchMethod(
        Invocation.method(
          #getArticleList,
          [],
        ),
        returnValue:
            _i7.Future<List<_i8.ArticleModel>>.value(<_i8.ArticleModel>[]),
      ) as _i7.Future<List<_i8.ArticleModel>>);
  @override
  _i7.Future<_i2.ArticleDetailModel> getArticleDetail(String? url) =>
      (super.noSuchMethod(
        Invocation.method(
          #getArticleDetail,
          [url],
        ),
        returnValue:
            _i7.Future<_i2.ArticleDetailModel>.value(_FakeArticleDetailModel_0(
          this,
          Invocation.method(
            #getArticleDetail,
            [url],
          ),
        )),
      ) as _i7.Future<_i2.ArticleDetailModel>);
  @override
  _i7.Future<bool> checkLikeStatus(String? id) => (super.noSuchMethod(
        Invocation.method(
          #checkLikeStatus,
          [id],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<bool> likeArticle(String? id) => (super.noSuchMethod(
        Invocation.method(
          #likeArticle,
          [id],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<List<_i9.CommentModel>> getCommentList(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommentList,
          [id],
        ),
        returnValue:
            _i7.Future<List<_i9.CommentModel>>.value(<_i9.CommentModel>[]),
      ) as _i7.Future<List<_i9.CommentModel>>);
  @override
  _i7.Future<bool> sendComment({
    required String? id,
    required String? comment,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendComment,
          [],
          {
            #id: id,
            #comment: comment,
          },
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<bool> deleteComment({
    required String? id,
    required int? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteComment,
          [],
          {
            #id: id,
            #userId: userId,
          },
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<void> createArticle({
    required String? title,
    required String? content,
    required _i10.File? thumbnail,
    required List<String>? categories,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createArticle,
          [],
          {
            #title: title,
            #content: content,
            #thumbnail: thumbnail,
            #categories: categories,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [AuthDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthDataSource extends _i1.Mock implements _i11.AuthDataSource {
  MockAuthDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<bool> checkGoogleAuth() => (super.noSuchMethod(
        Invocation.method(
          #checkGoogleAuth,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<void> signInWithGoogle(String? base64Date) => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [base64Date],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [ProfileDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileDataSource extends _i1.Mock implements _i12.ProfileDataSource {
  MockProfileDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.UserModel> getProfile() => (super.noSuchMethod(
        Invocation.method(
          #getProfile,
          [],
        ),
        returnValue: _i7.Future<_i3.UserModel>.value(_FakeUserModel_1(
          this,
          Invocation.method(
            #getProfile,
            [],
          ),
        )),
      ) as _i7.Future<_i3.UserModel>);
  @override
  _i7.Future<void> changeProfile() => (super.noSuchMethod(
        Invocation.method(
          #changeProfile,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [ArticleRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticleRepository extends _i1.Mock implements _i13.ArticleRepository {
  MockArticleRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Either<_i14.Failure, List<_i15.Article>>> getArticleList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getArticleList,
          [],
        ),
        returnValue:
            _i7.Future<_i4.Either<_i14.Failure, List<_i15.Article>>>.value(
                _FakeEither_2<_i14.Failure, List<_i15.Article>>(
          this,
          Invocation.method(
            #getArticleList,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i14.Failure, List<_i15.Article>>>);
  @override
  _i7.Future<_i4.Either<_i14.Failure, _i16.ArticleDetail>> getArticleDetail(
          String? url) =>
      (super.noSuchMethod(
        Invocation.method(
          #getArticleDetail,
          [url],
        ),
        returnValue:
            _i7.Future<_i4.Either<_i14.Failure, _i16.ArticleDetail>>.value(
                _FakeEither_2<_i14.Failure, _i16.ArticleDetail>(
          this,
          Invocation.method(
            #getArticleDetail,
            [url],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i14.Failure, _i16.ArticleDetail>>);
  @override
  _i7.Future<_i4.Either<_i14.Failure, bool>> checkLikeStatus(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkLikeStatus,
          [id],
        ),
        returnValue: _i7.Future<_i4.Either<_i14.Failure, bool>>.value(
            _FakeEither_2<_i14.Failure, bool>(
          this,
          Invocation.method(
            #checkLikeStatus,
            [id],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i14.Failure, bool>>);
  @override
  _i7.Future<_i4.Either<_i14.Failure, void>> likeArticle(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #likeArticle,
          [id],
        ),
        returnValue: _i7.Future<_i4.Either<_i14.Failure, void>>.value(
            _FakeEither_2<_i14.Failure, void>(
          this,
          Invocation.method(
            #likeArticle,
            [id],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i14.Failure, void>>);
  @override
  _i7.Future<_i4.Either<_i14.Failure, List<_i17.Comment>>> getCommentList(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommentList,
          [id],
        ),
        returnValue:
            _i7.Future<_i4.Either<_i14.Failure, List<_i17.Comment>>>.value(
                _FakeEither_2<_i14.Failure, List<_i17.Comment>>(
          this,
          Invocation.method(
            #getCommentList,
            [id],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i14.Failure, List<_i17.Comment>>>);
  @override
  _i7.Future<_i4.Either<_i14.Failure, void>> sendComment({
    required String? id,
    required String? comment,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendComment,
          [],
          {
            #id: id,
            #comment: comment,
          },
        ),
        returnValue: _i7.Future<_i4.Either<_i14.Failure, void>>.value(
            _FakeEither_2<_i14.Failure, void>(
          this,
          Invocation.method(
            #sendComment,
            [],
            {
              #id: id,
              #comment: comment,
            },
          ),
        )),
      ) as _i7.Future<_i4.Either<_i14.Failure, void>>);
  @override
  _i7.Future<_i4.Either<_i14.Failure, void>> deleteComment({
    required String? id,
    required int? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteComment,
          [],
          {
            #id: id,
            #userId: userId,
          },
        ),
        returnValue: _i7.Future<_i4.Either<_i14.Failure, void>>.value(
            _FakeEither_2<_i14.Failure, void>(
          this,
          Invocation.method(
            #deleteComment,
            [],
            {
              #id: id,
              #userId: userId,
            },
          ),
        )),
      ) as _i7.Future<_i4.Either<_i14.Failure, void>>);
  @override
  _i7.Future<_i4.Either<_i14.Failure, void>> createArticle({
    required String? title,
    required String? content,
    required _i10.File? thumbnail,
    required List<String>? categories,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createArticle,
          [],
          {
            #title: title,
            #content: content,
            #thumbnail: thumbnail,
            #categories: categories,
          },
        ),
        returnValue: _i7.Future<_i4.Either<_i14.Failure, void>>.value(
            _FakeEither_2<_i14.Failure, void>(
          this,
          Invocation.method(
            #createArticle,
            [],
            {
              #title: title,
              #content: content,
              #thumbnail: thumbnail,
              #categories: categories,
            },
          ),
        )),
      ) as _i7.Future<_i4.Either<_i14.Failure, void>>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i18.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Either<_i14.Failure, void>> signInWithGoogle(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [token],
        ),
        returnValue: _i7.Future<_i4.Either<_i14.Failure, void>>.value(
            _FakeEither_2<_i14.Failure, void>(
          this,
          Invocation.method(
            #signInWithGoogle,
            [token],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i14.Failure, void>>);
  @override
  _i7.Future<_i4.Either<_i14.Failure, void>> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i7.Future<_i4.Either<_i14.Failure, void>>.value(
            _FakeEither_2<_i14.Failure, void>(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i14.Failure, void>>);
  @override
  _i7.Future<_i4.Either<_i14.Failure, bool>> checkGoogleAuth() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkGoogleAuth,
          [],
        ),
        returnValue: _i7.Future<_i4.Either<_i14.Failure, bool>>.value(
            _FakeEither_2<_i14.Failure, bool>(
          this,
          Invocation.method(
            #checkGoogleAuth,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i14.Failure, bool>>);
}

/// A class which mocks [ProfileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileRepository extends _i1.Mock implements _i19.ProfileRepository {
  MockProfileRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Either<_i14.Failure, _i20.User>> getProfile() =>
      (super.noSuchMethod(
        Invocation.method(
          #getProfile,
          [],
        ),
        returnValue: _i7.Future<_i4.Either<_i14.Failure, _i20.User>>.value(
            _FakeEither_2<_i14.Failure, _i20.User>(
          this,
          Invocation.method(
            #getProfile,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i14.Failure, _i20.User>>);
  @override
  _i7.Future<_i4.Either<_i14.Failure, void>> changeProfile() =>
      (super.noSuchMethod(
        Invocation.method(
          #changeProfile,
          [],
        ),
        returnValue: _i7.Future<_i4.Either<_i14.Failure, void>>.value(
            _FakeEither_2<_i14.Failure, void>(
          this,
          Invocation.method(
            #changeProfile,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i14.Failure, void>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i5.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i21.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i21.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i21.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i21.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<String>.value(''),
      ) as _i7.Future<String>);
  @override
  _i7.Future<_i22.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i22.Uint8List>.value(_i22.Uint8List(0)),
      ) as _i7.Future<_i22.Uint8List>);
  @override
  _i7.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i7.Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_4(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i7.Future<_i5.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
